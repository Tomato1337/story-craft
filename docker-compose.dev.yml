version: '3.8'
# !!! Сервисы называем с суффиксом -dev
# !!! Для внутренних сервисов добавляем сеть backend
networks:
  frontend:
  backend:
    internal: true
services:
  api-gateway-dev:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    # volumes:
    #   - ./services/api-gateway:/app
    #   - /app/node_modules
    environment:
      - PORT=${API_GATEWAY_PORT}
      - NODE_ENV=dev
      - PORT_AUTH_SERVICE=${AUTH_SERVICE_PORT}
      - PORT_STORY_SERVICE=${STORY_SERVICE_PORT}
      - PORT_USER_SERVICE=${USER_SERVICE_PORT}
      - PORT_MEDIA_SERVICE=${MEDIA_SERVICE_PORT}
      - PORT_SOCIAL_SERVICE=${SOCIAL_SERVICE_PORT}
      - PORT_NOTIFICATION_SERVICE=${NOTIFICATION_SERVICE_PORT}
    develop:
      watch:
        - action: sync
          path: ./services/api-gateway
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/api-gateway/package.json
    depends_on:
      auth-service-dev:
        condition: service_healthy
      story-service-dev:
        condition: service_healthy
      # user-profile-service-dev:
      #   condition: service_healthy
    env_file:
      - .env
    networks:
      - frontend
      - backend

  auth-service-dev:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    volumes:
        - ./services/auth-service/prisma:/app/prisma
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - NODE_ENV=dev
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/storycraft_auth
    develop:
      watch:
        - action: sync
          path: ./services/auth-service
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/auth-service/package.json
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
        test: ["CMD-SHELL", "wget -q --spider http://localhost:${AUTH_SERVICE_PORT}/health > /dev/null 2>&1"]
        interval: 30s
        timeout: 5s
        retries: 5
        start_period: 10s
    env_file:
      - .env
    networks:
      - backend

  user-profile-service-dev:
    build:
      context: ./services/user-profile-service
      dockerfile: Dockerfile
    environment:
      - PORT=${USER_SERVICE_PORT}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    develop:
      watch:
        - action: sync
          path: ./services/user-profile-service
          target: /app
        - action: rebuild
          path: ./services/user-profile-service/go.mod
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend
  story-service-dev:
      build:
        context: ./services/story-service
        dockerfile: Dockerfile.dev      
      ports:
        - 9323:9323 # Playwright
      volumes:
        - ./services/story-service/prisma:/app/prisma
      environment:
        - PORT=${STORY_SERVICE_PORT}
        - NODE_ENV=dev
        - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/storycraft_story
      develop:
        watch:
          - action: sync
            path: ./services/story-service
            target: /app
            ignore:
              - node_modules/
              - prisma/
          - action: rebuild
            path: ./services/story-service/package.json
      depends_on:
        postgres:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "wget -q --spider http://localhost:${STORY_SERVICE_PORT}/health > /dev/null 2>&1"]
        interval: 30s
        timeout: 5s
        retries: 5
        start_period: 10s
      env_file:
        - .env
      networks:
        - backend