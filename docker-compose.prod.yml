version: '3.8'
# !!! Для внутренних сервисов добавляем сеть backend
networks:
  frontend:
  backend:
    internal: true
services:
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    environment:
      - PORT=${API_GATEWAY_PORT}
      - NODE_ENV=prod
      - PORT_AUTH_SERVICE=${AUTH_SERVICE_PORT}
      - PORT_STORY_SERVICE=${STORY_SERVICE_PORT}
      - PORT_USER_SERVICE=${USER_SERVICE_PORT}
      - PORT_MEDIA_SERVICE=${MEDIA_SERVICE_PORT}
      - PORT_SOCIAL_SERVICE=${SOCIAL_SERVICE_PORT}
      - PORT_NOTIFICATION_SERVICE=${NOTIFICATION_SERVICE_PORT}
    depends_on:
      auth-service:
        condition: service_healthy
      story-service:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - frontend
      - backend
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.prod
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - NODE_ENV=prod
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/storycraft_auth
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:${AUTH_SERVICE_PORT}/health > /null 2>&1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - backend
  story-service:
    build:
      context: ./services/story-service
      dockerfile: Dockerfile.prod
    ports:
      - ${STORY_SERVICE_PORT}:${STORY_SERVICE_PORT}
    environment:
      - PORT=${STORY_SERVICE_PORT}
      - NODE_ENV=prod
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/storycraft_story
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:${STORY_SERVICE_PORT}/health > /null 2>&1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - backend
  user-profile-service:
    build:
      context: ./services/user-profile-service
      dockerfile: Dockerfile
    environment:
      - PORT=${USER_SERVICE_PORT}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend